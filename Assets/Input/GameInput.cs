//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""TrafficLight"",
            ""id"": ""49428827-2f96-45ef-a423-d58b30ef2c1d"",
            ""actions"": [
                {
                    ""name"": ""Green"",
                    ""type"": ""Button"",
                    ""id"": ""9ef20030-7c20-4229-80ad-aea4cbabe45f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Red"",
                    ""type"": ""Button"",
                    ""id"": ""e90109a9-c86d-4ccb-8fe7-f10dfb6595b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeLight"",
                    ""type"": ""Button"",
                    ""id"": ""a4ae53b7-eb6a-44f2-bb2a-db65ad7d42ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b75fc4cd-3ebb-4cd7-b9b0-f04406abb38a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Green"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""252ad8e8-58c1-40ac-8cf2-91ec669f26d4"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Red"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b25a868-e043-4172-aaea-91854bd93640"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeLight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ObjSelected"",
            ""id"": ""26433131-c8e1-4e5a-9797-1c73db7b89b5"",
            ""actions"": [
                {
                    ""name"": ""Selected"",
                    ""type"": ""Value"",
                    ""id"": ""de9fdef3-7f83-41bd-9477-25f054af24f5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""a10669f7-e98a-449c-84ed-2a26110c3794"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ce8f7385-dc4d-4638-b9ed-ce758bb29e9f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selected"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccb4a4e0-bddd-4217-af63-20c795d4d4a5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TrafficLight
        m_TrafficLight = asset.FindActionMap("TrafficLight", throwIfNotFound: true);
        m_TrafficLight_Green = m_TrafficLight.FindAction("Green", throwIfNotFound: true);
        m_TrafficLight_Red = m_TrafficLight.FindAction("Red", throwIfNotFound: true);
        m_TrafficLight_ChangeLight = m_TrafficLight.FindAction("ChangeLight", throwIfNotFound: true);
        // ObjSelected
        m_ObjSelected = asset.FindActionMap("ObjSelected", throwIfNotFound: true);
        m_ObjSelected_Selected = m_ObjSelected.FindAction("Selected", throwIfNotFound: true);
        m_ObjSelected_Click = m_ObjSelected.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TrafficLight
    private readonly InputActionMap m_TrafficLight;
    private ITrafficLightActions m_TrafficLightActionsCallbackInterface;
    private readonly InputAction m_TrafficLight_Green;
    private readonly InputAction m_TrafficLight_Red;
    private readonly InputAction m_TrafficLight_ChangeLight;
    public struct TrafficLightActions
    {
        private @GameInput m_Wrapper;
        public TrafficLightActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Green => m_Wrapper.m_TrafficLight_Green;
        public InputAction @Red => m_Wrapper.m_TrafficLight_Red;
        public InputAction @ChangeLight => m_Wrapper.m_TrafficLight_ChangeLight;
        public InputActionMap Get() { return m_Wrapper.m_TrafficLight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TrafficLightActions set) { return set.Get(); }
        public void SetCallbacks(ITrafficLightActions instance)
        {
            if (m_Wrapper.m_TrafficLightActionsCallbackInterface != null)
            {
                @Green.started -= m_Wrapper.m_TrafficLightActionsCallbackInterface.OnGreen;
                @Green.performed -= m_Wrapper.m_TrafficLightActionsCallbackInterface.OnGreen;
                @Green.canceled -= m_Wrapper.m_TrafficLightActionsCallbackInterface.OnGreen;
                @Red.started -= m_Wrapper.m_TrafficLightActionsCallbackInterface.OnRed;
                @Red.performed -= m_Wrapper.m_TrafficLightActionsCallbackInterface.OnRed;
                @Red.canceled -= m_Wrapper.m_TrafficLightActionsCallbackInterface.OnRed;
                @ChangeLight.started -= m_Wrapper.m_TrafficLightActionsCallbackInterface.OnChangeLight;
                @ChangeLight.performed -= m_Wrapper.m_TrafficLightActionsCallbackInterface.OnChangeLight;
                @ChangeLight.canceled -= m_Wrapper.m_TrafficLightActionsCallbackInterface.OnChangeLight;
            }
            m_Wrapper.m_TrafficLightActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Green.started += instance.OnGreen;
                @Green.performed += instance.OnGreen;
                @Green.canceled += instance.OnGreen;
                @Red.started += instance.OnRed;
                @Red.performed += instance.OnRed;
                @Red.canceled += instance.OnRed;
                @ChangeLight.started += instance.OnChangeLight;
                @ChangeLight.performed += instance.OnChangeLight;
                @ChangeLight.canceled += instance.OnChangeLight;
            }
        }
    }
    public TrafficLightActions @TrafficLight => new TrafficLightActions(this);

    // ObjSelected
    private readonly InputActionMap m_ObjSelected;
    private IObjSelectedActions m_ObjSelectedActionsCallbackInterface;
    private readonly InputAction m_ObjSelected_Selected;
    private readonly InputAction m_ObjSelected_Click;
    public struct ObjSelectedActions
    {
        private @GameInput m_Wrapper;
        public ObjSelectedActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Selected => m_Wrapper.m_ObjSelected_Selected;
        public InputAction @Click => m_Wrapper.m_ObjSelected_Click;
        public InputActionMap Get() { return m_Wrapper.m_ObjSelected; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ObjSelectedActions set) { return set.Get(); }
        public void SetCallbacks(IObjSelectedActions instance)
        {
            if (m_Wrapper.m_ObjSelectedActionsCallbackInterface != null)
            {
                @Selected.started -= m_Wrapper.m_ObjSelectedActionsCallbackInterface.OnSelected;
                @Selected.performed -= m_Wrapper.m_ObjSelectedActionsCallbackInterface.OnSelected;
                @Selected.canceled -= m_Wrapper.m_ObjSelectedActionsCallbackInterface.OnSelected;
                @Click.started -= m_Wrapper.m_ObjSelectedActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_ObjSelectedActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_ObjSelectedActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_ObjSelectedActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Selected.started += instance.OnSelected;
                @Selected.performed += instance.OnSelected;
                @Selected.canceled += instance.OnSelected;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public ObjSelectedActions @ObjSelected => new ObjSelectedActions(this);
    public interface ITrafficLightActions
    {
        void OnGreen(InputAction.CallbackContext context);
        void OnRed(InputAction.CallbackContext context);
        void OnChangeLight(InputAction.CallbackContext context);
    }
    public interface IObjSelectedActions
    {
        void OnSelected(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
}
